EEMSO_FACTOR = 8
ALLOW_CONTINUE = False

GRID_PATH = 'subsetter/maps/grid%s.shp'
EPS = 0.00001

base = lambda x: os.path.splitext(x)[0]

localrules: make_pilot0_ini_file, make_post_pilot0_ini

rule run_eems0_single_run:
    input:
        outer='eems/{name}.outer',
        diffs='eems/{name}.diffs',
        order='eems/{name}.order',
        coord='eems/{name}-run{i, \d+}.coord',
        inifile='eems0/{name}-run{i, \d+}.ini',
    log:
        'eemsout0/{i, \d+}/{name}/log.txt',
    benchmark:
        'eemsout0/{i, \d+}/{name}/bm.json',
    output:
        demes='eemsout0/{i, \d+}/{name}/demes.txt',
        edges='eemsout0/{i, \d+}/{name}/edges.txt',
        ipmap='eemsout0/{i, \d+}/{name}/ipmap.txt',
        outer='eemsout0/{i, \d+}/{name}/outer.txt',
        mhyper='eemsout0/{i, \d+}/{name}/mcmcmhyper.txt',
        mrates='eemsout0/{i, \d+}/{name}/mcmcmrates.txt',
        mtiles='eemsout0/{i, \d+}/{name}/mcmcmtiles.txt',
        pilogl='eemsout0/{i, \d+}/{name}/mcmcpilogl.txt',
        qhyper='eemsout0/{i, \d+}/{name}/mcmcqhyper.txt',
        qrates='eemsout0/{i, \d+}/{name}/mcmcqrates.txt',
        qtiles='eemsout0/{i, \d+}/{name}/mcmcqtiles.txt',
        thetas='eemsout0/{i, \d+}/{name}/mcmcthetas.txt',
        wcoord='eemsout0/{i, \d+}/{name}/mcmcwcoord.txt',
        xcoord='eemsout0/{i, \d+}/{name}/mcmcxcoord.txt',
        ycoord='eemsout0/{i, \d+}/{name}/mcmcycoord.txt',
        zcoord='eemsout0/{i, \d+}/{name}/mcmczcoord.txt',
        Dobs='eemsout0/{i, \d+}/{name}/rdistJtDobsJ.txt',
        Dhat='eemsout0/{i, \d+}/{name}/rdistJtDhatJ.txt',
    run:
        wc = wildcards.name, wildcards.i
        new_diff = 'eems/%s-run%s.diffs' % wc
        new_outer = 'eems/%s-run%s.outer' % wc
        s = 'ln -f %s %s ' % (input.outer, new_outer)
        shell(s)
        s = 'ln -f %s %s ' % (input.diffs, new_diff)
        shell(s)
        s = config['EXE']['eems0'] + " --params " + input.inifile 
        shell(s + " 2> {log}")


eems_output_files = ['demes.txt', 
    'edges.txt',
    'ipmap.txt',
    'outer.txt',
    'mcmcmhyper.txt',
    'mcmcmrates.txt',
    'mcmcmtiles.txt',
    'mcmcqhyper.txt',
    'mcmcqrates.txt',
    'mcmcqtiles.txt',
    'mcmcpilogl.txt',
    'mcmcthetas.txt',
    'mcmcmxcoord.txt',
    'mcmcmycoord.txt',
    'mcmcmzcoord.txt',
    'mcmcmwcoord.txt']
eems_last_files = ['demes.txt', 
    'edges.txt',
    'ipmap.txt',
    'outer.txt',
    'lastdfpars.txt',
    'lastmeffct.txt',
    'lastmhyper.txt',
    'lastmseeds.txt',
    'lastmtiles.txt',
    'lastqeffct.txt',
    'lastqhyper.txt',
    'lastqseeds.txt',
    'lastqtiles.txt',
    'lastpilogl.txt',
    'lastthetas.txt']
rule run_eems_single_pilot0_run:
    input:
        outer='eems/{name}.outer',
        diffs='eems/{name}.diffs',
        order='eems/{name}.order',
        coord='eems/{name}-run{i, \d+}.coord',
        inifile='eemspilot0/{name}-pilot{i, \d+}.ini',
    log:
        'eemspilot0/{i, \d+}/{name}/log.txt',
    benchmark:
        'eemspilot0/{i, \d+}/{name}/bm.json',
    output:
        expand("eemspilot0/{i}/{name}/{fname}",
            i=["{i, \d+}"],
            name=["{name}"],
            fname=eems_last_files)
    run:
        wc = wildcards.name, wildcards.i
        new_diff = 'eems/%s-run%s.diffs' % wc
        new_outer = 'eems/%s-run%s.outer' % wc
        s = 'ln -f %s %s ' % (input.outer, new_outer)
        shell(s)
        s = 'ln -f %s %s ' % (input.diffs, new_diff)
        shell(s)
        s = config['EXE']['eems0'] + " --params " + input.inifile 
        shell(s + " 2> {log}")

rule make_pilot0_ini_file:
    input:
        bim='subset/{name}.bim',
        coord='eems/{name}-run{i, \d+}.coord',
        outer='eems/{name}.outer',
        order='eems/{name}.order',
        diffs='eems/{name}.diffs',
        edges='eems/{name}-run{i, \d+}.edges',
        demes='eems/{name}-run{i, \d+}.demes',
        ipmap='eems/{name}-run{i, \d+}.ipmap'
    output:
        inifile='eemspilot0/{name}-pilot{i, \d+}.ini'
    run:
        from subsetter.eems import create_diffs_file, create_ini_file
        from subsetter.load import load_pop_geo, load_indiv_meta
        from subsetter.intersect import intersect
        import pandas as pd
        import numpy as np
        cfg = config['eems']['__default__'].copy()
        if "pilot" in config['eems']['__default__']:
            print("updating with default pilot")
            cfg.update(config['eems']['__default__']['pilot'])

        if wildcards.name in config['eems']:
            print("updating with name")
            cfg.update(config['eems'][wildcards.name])

        if "pilot" in config['eems'][wildcards.name]:
            print("updating with name")
            cfg.update(config['eems'][wildcards.name]['pilot'])
        
        n_demes = cfg.pop('nDemes')
        n_sites = np.loadtxt(input.bim, str).shape[0]
        cfg['nSites'] = n_sites
        mcmcpath='eemspilot0/' + wildcards.i + "/" + wildcards.name + '/'
        datapath = base(input.coord)
        ini = base(output.inifile)
        meta_data= pd.read_table(input.coord, header=None)

        if "gridsrc" in cfg and cfg['gridsrc'] == 'auto':
            pass
        else:
            cfg['gridpath'] = datapath

        #adapt ini
        cfg['numBurnIter'] = int(cfg['numBurnIter'] /EEMSO_FACTOR)
        cfg['numMCMCIter'] = int(cfg['numMCMCIter'] /EEMSO_FACTOR)
        cfg['numThinIter'] = int(cfg['numThinIter'] /EEMSO_FACTOR)
        
        create_ini_file(ini, mcmcpath, datapath,
            meta_data=meta_data,
            n_demes=n_demes, **cfg)

def get_pilot0_runs_input(wildcards):
    name = wildcards.name
    if 'continue' in config['eems'][name] and ALLOW_CONTINUE:
        return get_continue0_runs_input(wildcards)
    try:
        n_pilots = int(config['eems'][name]['n_pilots'])
    except KeyError:
        n_pilots = int(config['eems']['__default__']['n_pilots'])
    l = expand("eemspilot0/{i}/{name}/{fname}",
            i=range(n_pilots),
            name=[name],
            fname=['lastpilogl.txt'])
    return l

def get_continue0_runs_input(wildcards):
    name = wildcards.name
    continue_name = config['eems'][name]['continue']
    print("continuing run" + continue_name)
    n_pilots = 4
    l = expand("eemsout0/{i}/{name}/{fname}",
            i=range(n_pilots),
            name=[continue_name],
            fname=['lastpilogl.txt'])
    return l


rule make_post_pilot0_ini:
    input:
        prevs=get_pilot0_runs_input,
        bim='subset/{name}.bim',
        coord='eems/{name}-run{i, \d+}.coord',
        outer='eems/{name}.outer',
        order='eems/{name}.order',
        diffs='eems/{name}.diffs',
        edges='eems/{name}-run{i, \d+}.edges',
        demes='eems/{name}-run{i, \d+}.demes',
        ipmap='eems/{name}-run{i, \d+}.ipmap'
    output:
        inifile='eems0/{name}-run{i, \d+}.ini'
    run:
        from subsetter.eems import create_diffs_file, create_ini_file
        from subsetter.load import load_pop_geo, load_indiv_meta
        from subsetter.intersect import intersect
        import pandas as pd
        import numpy as np

        # first, get best pilot
        best_posterior = -np.inf
        best_pilot = ''
        for infile in input.prevs:
            pilogl = np.loadtxt(infile)
            print(pilogl)
            posterior = pilogl[1] - pilogl[0]
            if posterior > best_posterior:
                best_posterior = posterior
                best_pilot = os.path.dirname(infile)

        best_run_id = best_pilot.split("/")[1]

        # then, do same stuff as for regular ini
        cfg = config['eems']['__default__'].copy()
        if wildcards.name in config['eems']:
            cfg.update(config['eems'][wildcards.name])
        
        n_demes = cfg.pop('nDemes')
        n_sites = np.loadtxt(input.bim, str).shape[0]
        cfg['nSites'] = n_sites
        mcmcpath='eemsout0/' + wildcards.i + "/" + wildcards.name + '/'

        if 'continue' in config['eems'][wildcards.name] and ALLOW_CONTINUE:
            datapath = 'eems/%s-run%s' % (wildcards.name, wildcards.i)
        else:
            datapath = 'eems/%s-run%s' % (wildcards.name, best_run_id)
        coordfile = '%s.coord' % datapath
        ini = base(output.inifile)
        meta_data= pd.read_table(coordfile, header=None)

        cfg['gridpath'] = datapath
        cfg['prevpath'] = best_pilot

        #adapt ini
        cfg['numBurnIter'] = int(cfg['numBurnIter'] /EEMSO_FACTOR)
        cfg['numMCMCIter'] = int(cfg['numMCMCIter'] /EEMSO_FACTOR)
        cfg['numThinIter'] = int(cfg['numThinIter'] /EEMSO_FACTOR)

        create_ini_file(ini, mcmcpath, datapath,
            meta_data=meta_data,
            n_demes=n_demes, **cfg)
            
        

def eems0infn(wildcards):
    return expand('eemsout0/{i}/{n}/mcmcmrates.txt',
        i = range(int(wildcards.nruns)),
        n=[wildcards.name])
    
rule run_eems0_replicate_runs:
    input:
        eems0infn
        #expand('eems/oceania-run{i}.ini', i = range(10))
    output:
        'eemsout0/{name}_runs{nruns}.controller'
    shell: 'touch {output}'


def eems0in(wildcards):
        demes=expand('eemsout0/{i}/{name}/demes.txt',
            i=range(int(wildcards.nruns)),
            name=[wildcards.name])
        thetas=expand('eemsout0/{i}/{name}/mcmcthetas.txt',
            i=range(int(wildcards.nruns)),
            name=[wildcards.name])
        outer=expand('eems/{name}.outer', 
            name=[wildcards.name])
        return demes + thetas + outer
rule plot_eems0:
    input:
        eems0in,
        pop_display=_POP_DISPLAY_,
        pop_geo='subset/{name}.pop_geo',
        indiv_label='subset/{name}.indiv_meta'
    output:
        mplot="eemsout0/{name}_nruns{nruns}-mrates01.png"
    run:
        grid = config['eems'][wildcards.name]['grid'] 
        s =  "%s scripts/eems_plot/make_plots.r" % config['EXE']['R']
        s +=   " {wildcards.nruns} {wildcards.name} {grid}"
        s += " {input.pop_display} {input.pop_geo} {input.indiv_label} 0"
        shell(s)
        

rule all_eems0:
    input:
        subset_paper_fun(prefix='eemsout0/', ext='_runs4.controller')

rule get_bayes_factor:
    input:
        pilogl0='eemsout0/{i, \d+}/{name}/mcmcpilogl.txt',
        pilogl1='eemsout/{i, \d+}/{name}/mcmcpilogl.txt',
        script= "scripts/bf.R",
    output:
        x="eemsout/{i, \d+}/{name}/bf.txt"
    script: "../" + "scripts/bf.R"
    

"""
rule ggplot_eems0:
    input:
        eems0in,
        pop_display=_POP_DISPLAY_,
        pop_geo='subset/{name}.pop_geo',
        indiv_label='subset/{name}.indiv_meta'
    params:
        RES=200,
        ZOOM=4,
        fancy=0
    output:
        mplot="eemsout_gg/{name}_nruns{nruns}-mrates01.png",
        m2plot="eemsout_gg/{name}_nruns{nruns}-mrates02.png"
    run:
        s =  "%s scripts/ggeems/run.R" % config['EXE']['R']
        s +=   " {wildcards.nruns} {wildcards.name} "
        s += " {input.pop_display} {input.pop_geo} {input.indiv_label}"
        s += " {params.RES} {params.ZOOM} {params.fancy}"
        shell(s)

rule ggeems_scatter:
    input:
        eemsin,
        pop_display=_POP_DISPLAY_,
        pop_geo='subset/{name}.pop_geo',
        indiv_label='subset/{name}.indiv_meta',
        diffs='eems/{name}.diffs',
        order='eems/{name}.order',
	ggpcvsgrid='figures/pcvsgrid/{name}_pc1-2.rds',
	ggrsq='figures/rsq/{name}_pc1-10.rds',
        script='scripts/ggeems/scatter.R'
    output:
        p1="eemsout_gg/{name}_nruns{nruns, \d+}-scatter01.png",
        p2="eemsout_gg/{name}_nruns{nruns, \d+}-scatter02.png",
        p3="eemsout_gg/{name}_nruns{nruns, \d+}-scatter03.png",
        p4="eemsout_gg/{name}_nruns{nruns, \d+}-scatter04.png",
        p5="eemsout_gg/{name}_nruns{nruns, \d+}-scatter05.png",
        p6="eemsout_gg/{name}_nruns{nruns, \d+}-scatter06.png",
        p7="eemsout_gg/{name}_nruns{nruns, \d+}-scatter07.png",
        paperfig="figures/paper/scatter_{name}_nruns{nruns, \d+}.png",
    run:
        s =  "%s scripts/ggeems/run_scatter.R" % config['EXE']['R']
        s +=   " {wildcards.nruns} {wildcards.name} "
        s += " {input.pop_display} {input.pop_geo} {input.indiv_label} "
        s += " {input.diffs} {input.order} "
        shell(s)

rule ggeems_scatter_hlex:
    input:
        eemsin,
        pop_display=_POP_DISPLAY_,
        pop_geo='subset/{name}.pop_geo',
        indiv_label='subset/{name}.indiv_meta',
        exfam='subset/{exname}.fam',
        diffs='eems/{name}.diffs',
        order='eems/{name}.order',
    output:
        p1="eemsout_gg/{name}_nruns{nruns}_ex:{exname}-scatter01.png",
        p2="eemsout_gg/{name}_nruns{nruns}_ex:{exname}-scatter02.png",
        p3="eemsout_gg/{name}_nruns{nruns}_ex:{exname}-scatter03.png",
        p4="eemsout_gg/{name}_nruns{nruns}_ex:{exname}-scatter04.png",
    run:
        s =  "%s scripts/ggeems/run_scatter.R" % config['EXE']['R']
        s +=   " {wildcards.nruns} {wildcards.name} "
        s += " {input.pop_display} {input.pop_geo} {input.indiv_label} "
        s += " {input.diffs} {input.order} "
        s += " {input.exfam} {wildcards.exname}"

        shell(s)

rule all_figs:
    input:
        "eemsout_gg/{name}_nruns4-mrates01.png",
        "eemsout/{name}_nruns4-mrates01.png",
        "eemsout_gg/{name}_nruns4-scatter01.png",
        "figures/pcvsgrid/{name}_pc1-10.png",
        "figures/pcvsgrid/{name}_pc1-2.png",
        "figures/pca/pc1d_{name}_pc1.png",
	"figures/pca/loadings_{name}_pc20.png"
    output:
        "{name}.figs"
    shell:
        "touch {output}"
"""
