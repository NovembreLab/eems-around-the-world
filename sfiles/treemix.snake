import gzip
from collections import defaultdict
from snakemake.utils import R

def plink2treemix(inname, outname):
    """this is a condensed version of Joe Pickrell's script
        plink2treemix.py, which is distributed with treemix
    """
    snpdict = dict()
    pops = set()                                                                     
    
    last_rs = ""
    wrote_header= False
                                                                                     
    with open(inname) as infile:
        with gzip.open(outname, 'wt') as outfile:
            line = infile.readline()                                                         
            for line in infile:
                line = line.strip().split()                                                  
                _, rs, pop, _, _, _, mc, total = line
                pops.add(pop)

                if last_rs != rs:
                    if last_rs == "": #first line
                        last_rs = rs
                    else: #new snp
                        if not wrote_header:
                            lpops = list(pops)
                            outfile.write(" ".join(lpops) + "\n")
                            wrote_header = True
                                                                                     
                        l = ["%d,%d" % snpdict[pop] for pop in lpops]
                        s = " ".join(l) + "\n"
                        outfile.write(s)
                        snpdict = dict()

                last_rs = rs
                snpdict[pop] = int(mc), int(total) - int(mc)

rule make_treemix_input:
    input:
        frq_strat='{name}.frq.strat'
    output:
        treemix_in='treemix/{name}.in.gz',
    run:
        plink2treemix(input.frq_strat, output.treemix_in)

rule run_treemix_single:
    input: rules.make_treemix_input.output
    params:
        seed_base=141,
        blocksize=500,
    benchmark:
        'treemix/{name}_m{m}_run{run}.BM'
    output:
        cov='treemix/{name}_m{m}_run{run}.cov.gz',
        covse='treemix/{name}_m{m}_run{run}.covse.gz',
        edges='treemix/{name}_m{m}_run{run}.edges.gz',
        modelcov='treemix/{name}_m{m}_run{run}.modelcov.gz',
        llik='treemix/{name}_m{m}_run{run}.llik',
        treeout='treemix/{name}_m{m}_run{run}.treeout.gz',
        vertices='treemix/{name}_m{m}_run{run}.vertices.gz',
    log: 'treemix/{name}_m{m}_run{run}.treemix.log'
    run:
        outname = base(base(output.cov))
        seed = params.seed_base * 23 + int(wildcards.m) * 19 + int(wildcards.run)
        s = config['EXE']['treemix'] + ' -i {input} '
        s += '-m {wildcards.m} '
        s += '-o {outname} '
        s += '-k {params.blocksize} '
        s += '-seed {seed} '
        s += '2> {log} > /dev/null'
        shell(s)

def treemix_setfun(wildcards):
    ext = ['treeout.gz']
    m = range(int(wildcards.mlower), int(wildcards.mupper) + 1)
    runs = range(int(wildcards.nruns))
    return expand("treemix/{name}_m{m}_run{runs}.{ext}",
        name = [wildcards.name], m=m, ext=ext, runs=runs)
rule run_treemix_set:
    input: treemix_setfun
    output:
        'treemix/{name}_m{mlower, \d+}-{mupper, \d+}_runs{nruns, \d+}.controller'
    shell: 'touch {output}'

rule plot_treemix_best:
    input: 
        rules.run_treemix_set.input,
        #'scripts/plot_treemix_lib.R',
        #pop_display=_POP_DISPLAY_,
    output: 
        treeplot='treemix/{name}_m{mlower, \d+}-{mupper, \d+}_runs{nruns, \d+}.tree.png',
        residplot='treemix/{name}_m{mlower, \d+}-{mupper, \d+}_runs{nruns, \d+}.resid.png',
        tmp='tmp{name}{mlower}{mupper}{nruns}.order',
        p1=temp("treemix/{name}_{mlower}_{mupper}_{nruns}.1.R"),
        p2=temp("treemix/{name}_{mlower}_{mupper}_{nruns}.2.R"),
    run:
        p1, p2 = output.p1, output.p2,
        import numpy as np
        __script__='scripts/plot_treemix_lib.R',
        pop_display=_POP_DISPLAY_,
        #__script__ = input.lib                 
        #pop_display = input.pop_display        
        print(input)
        infiles = input

        bases = [base(base(s)) for s in infiles]
        max_llik = 'NONE', -np.inf
        for b in bases:
            with open("%s.llik" %b) as f:
                x = f.read().split()
                print(x, len(x))
                ll = float(x[len(x)-1])
                if ll > max_llik[1]:
                    max_llik = b, ll

        s = """
            source("{__script__}")
            png(file="{output.treeplot}", width=1600, height=1200)
            plot_tree("{max_llik[0]}")
            dev.off()
            """
        shell("echo '%s' > {p1}" %s)
        shell("R CMD BATCH {p1}")
        #shell("Rscript tmp.R")

        s = """
            source("{__script__}")
            x = read.table(gzfile("{max_llik[0]}.cov.gz"), check.names=F)
            n <- data.frame(popId=gsub("_", " ", names(x)))
            pop_display <- read.csv("{pop_display}")       
            m <- merge(n, pop_display, all.x=T)
            m <- m[order(m$order),"popId"]
            write.table(gsub(" ", "_", m), "{output.tmp}", row.names=F, quote=F, col.names=F)
        
            png(file="{output.residplot}", width=1600, height=1200)
            plot_resid("{max_llik[0]}", "{output.tmp}")
            dev.off()
        """
        shell("echo '%s' > {p2}" %s)
        shell("R CMD BATCH {p2}")
        #shell("Rscript tmp.R")

