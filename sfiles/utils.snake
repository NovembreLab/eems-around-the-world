from snakemake.utils import R

rule get_pop_frq:
    input:
        bed='{name}.bed',
        bim='{name}.bim',
        fam='{name}.fam',
        indiv_meta='{name}.indiv_meta',
    output:
        frq='{name}.frq.strat',
        pops='{name}.pops'
    run:
        import pandas as pd
        im = pd.read_csv(input.indiv_meta)
        im = im[['sampleId', 'sampleId', 'popId']]
        try:
            im.popId = im.popId.str.replace(' ', '_')
        except AttributeError:
            pass
        im.to_csv(output.pops, sep=" ", index=False)
        shell('cp {output.pops} tmpf')

        inname = base(input.bed)
        outname = base(base(output.frq))
        s = [PLINK_EXE, '--bfile', inname, '--freq',
            '--within', output.pops, '--out', outname, 
            '--allow-extra-chr']
        shell(" ".join(s))


rule to_vcf:
    input:
        bed='{name}.bed',
        bim='{name}.bim',
        fam='{name}.fam',
    output:
        vcf='{name}.vcf.gz'
    run:
        n = wildcards.name
        s = 'plink --bfile {n} --recode vcf-iid bgz --out {n}'
        shell(s)

        
rule to_pbwt:
    input:
        vcf='{name}.vcf.gz'
    output:
        pbwt='{name}.pbwt'
    run:
        l = [config['EXE']['pbwt'], '-readVcfGT', '{input.vcf}',
            '-write', output.pbwt]
        shell(" ".join(l))

rule indiv_meta:
    input:
        indiv_prov='{name}.indiv_prov',
        indiv_label='{name}.indiv_label'
    output:
        indiv_meta='{name}.indiv_meta'
    run:
        import pandas as pd
        prov = pd.read_csv(input.indiv_prov)
        label = pd.read_csv(input.indiv_label)
        data = pd.merge(prov, label)
        data.to_csv(output.indiv_meta, index=False)

rule sample_plot:
    input:
        poly="subset/{name}.polygon",
        pop_geo="subset/{name}.pop_geo"
    output:
        plot="subset/{name}_sample_map.png"
    script: "../scripts/sample_plot.R"

rule hwe_plot:
    input:
        hwe="subset/{name}.hwe",
    output:
        fig="figures/hwe/{name}.png"
    script : "../scripts/hwe.R"

    
rule hwe_test:
    input:
        bed="subset/{name}.bed",
    output:
        hwe="subset/{name}.hwe",
    run:
        inname = base(input.bed)
        outname = base(output.hwe)
        s = [PLINK_EXE, '--bfile', inname, '--hardy', '--out', outname]
        shell(" ".join(s))

rule hwe_min:
    input:
        hwe="subset/{name}.hwe",
    output:
        hwe="subset/{name}.hwemin",

    run:
        s = """a <- read.table("{input.hwe}", as.is=T, header=T)
            
            cat(min(a[a[,7] > a[,8],9], na.rm=T), file="{output.hwe}")"""
        R(s)

    
rule indiv_full:
    input:
        indiv_meta="subset/{name}.indiv_meta",
        pop_geo="subset/{name}.pop_geo",
        pop_display=_POP_DISPLAY_
    output:
        indiv_full="subset/{name}.indiv_full",
    run:
        R("""require(tidyverse);
            read.csv("{input.indiv_meta}") %>% 
                left_join(read.csv("{input.pop_geo}")) %>%
                left_join(read.csv("{input.pop_display}")) %>%
            write.csv("{output.indiv_full}", row.names=F) """)
